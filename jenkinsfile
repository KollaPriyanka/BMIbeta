pipeline {
  
    agent any
    tools {
        maven "Maven"   
    } 
   
    stages {
        stage('Compile-Build-Test ') {
            steps {
                sh 'mvn clean package'
            }
        }
        stage('SonarQube Analysis'){
                 environment{
                 sonarscanner = tool 'sonarscanner'
                 }
            steps{
               withSonarQubeEnv('sonarqube'){
                     sh '${sonarscanner}/bin/sonar-scanner -Dproject.settings=./sonar-project.properties'
                }
            }
        }
        
        stage("Quality Gate") {
            steps {
              timeout(time: 1, unit: 'HOURS') {
                waitForQualityGate abortPipeline: true
              }
            }
            
          }
          
           stage('Executing Playbook'){
            steps{
                withCredentials([string(credentialsId: 'ANSADMIN_PASSWORD', variable: 'ansadmin_password')]){//-C \"export VAULTPASS=${ansadmin_password};
                    sh 'sshpass -p ${ansadmin_password} ssh -v -o StrictHostKeyChecking=no ansadmin@172.31.22.13  \"ansible-playbook /opt/playbooks/BMI-Playbook.yml\"'
                    //sshPublisher(publishers: [sshPublisherDesc(configName: 'Ansible_server', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: 'ansible-playbook /opt/playbooks/project-ansible.yml', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '', remoteDirectorySDF: false, removePrefix: '', sourceFiles: '')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: true)])
           sh 'scp -i /var/lib/jenkins/.ssh/id_rsa -r /var/lib/jenkins/workspace/springboot-demo/target/springboot-0.0.1-SNAPSHOT.war ansadmin@172.31.31.91:/projects'

           }
            }
        }
        stage('Deploy to Development'){
            steps{
          
              //deploy adapters: [tomcat8(credentialsId: 'tomcat_cred', path: '', url: 'http://18.191.201.243:8080')], contextPath: 'bmi', onFailure: false, war: '**/*.war'
              /*sshagent(['tomcat_c']) {
            sh 'scp -o StrictHostKeyChecking=no target/*.war root@18.191.201.243:~/apache-tomcat-8.5.56/webapps/'
            }*/
          sh 'curl http://18.189.16.15:8080//manager/text/undeploy?path=/BMI -u tomcat:secret'
                    sh 'curl -v -u tomcat:secret -T target/BMI-0.war http://18.189.16.15:8080//manager/text/deploy?path=/BMI'
                  
            }
        }
        }
        
        post { 
                success { 
                    echo 'notified to slack '
                    slackSend (color: '#00FF00', message: " JOB SUCCESSFUL: Job '${JOB_NAME} [${BUILD_NUMBER}]'")
                }
                failure {
                    echo 'notified to slack'
                    slackSend (color: '#FF0000', message: " JOB FAILED: Job '${JOB_NAME} [${BUILD_NUMBER}]'")
                }
               }
        }
        
