pipeline {
  
    agent any
    tools {
        maven "Maven"   
    } 
   
    stages {
        stage('Compile-Build-Test ') {
            steps {
                sh 'mvn clean package'
            }
        }
        stage('SonarQube Analysis'){
                 environment{
                 sonarscanner = tool 'sonarscanner'
                 }
            steps{
               withSonarQubeEnv('sonarqube'){
                     sh '${sonarscanner}/bin/sonar-scanner -Dproject.settings=./sonar-project.properties'
                }
            }
        }
        
        stage("Quality Gate") {
            steps {
              timeout(time: 1, unit: 'HOURS') {
                waitForQualityGate abortPipeline: true
              }
            }
            
          }
        
        stage('Uploading playbook to Ansible'){
            steps{
                 withCredentials([usernamePassword(credentialsId: 'anisble_cred', passwordVariable: 'password', usernameVariable: 'priya')]) {  
                sh 'sshpass -p password scp -v playbook.yml ansadmin@3.23.88.249:/opt/playbooks'

                }
            }
            
        }
         
         stage('Uploading artifacts to Ansible'){
            steps{
 withCredentials([usernamePassword(credentialsId: 'anisble_cred', passwordVariable: 'password', usernameVariable: 'priya')]) {
                              sh 'sshpass -p ${password} scp -o StrictHostKeyChecking=no target/*.war ansadmin@3.23.88.249:~/target/'

            }
}
        }
        
        stage('Executing Playbook'){
            steps{
               withCredentials([usernamePassword(credentialsId: 'anisble_cred', passwordVariable: 'password', usernameVariable: 'priya')]) {
                    sh 'sshpass -p ${password} ssh -v -o StrictHostKeyChecking=no ansadmin@3.23.88.249 \"ansible-playbook /home/ansadmin/playbooks/playbook.yml\"'
                }
            }
        }
        
           
       //stage('Deploy to Development'){
           // steps{
          //deploy adapters: [tomcat8(credentialsId: 'tomcat_cred', path: '', url: 'http://18.191.201.243:8080')], contextPath: 'bmi', onFailure: false, war: '**/*.war'
            //  sshagent(['tomcat_c']) {
            //sh 'scp -o StrictHostKeyChecking=no target/*.war root@18.191.201.243:~/apache-tomcat-8.5.56/webapps/'
           // }
          //sh 'curl http://18.189.16.15:8080//manager/text/undeploy?path=/BMI -u tomcat:secret'
                  //  sh 'curl -v -u tomcat:secret -T target/BMI-0.war http://18.189.16.15:8080//manager/text/deploy?path=/BMI'
                  
           // }
       // }
        }
        
        post { 
                success { 
                    echo 'notified to slack '
                    slackSend (color: '#00FF00', message: " JOB SUCCESSFUL: Job '${JOB_NAME} [${BUILD_NUMBER}]'")
                }
                failure {
                    echo 'notified to slack'
                    slackSend (color: '#FF0000', message: " JOB FAILED: Job '${JOB_NAME} [${BUILD_NUMBER}]'")
                }
               }
        }
        
